# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from tl_pax8.models.order import Order

class TestOrder(unittest.TestCase):
    """Order unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Order:
        """Test Order
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Order`
        """
        model = Order()
        if include_optional:
            return Order(
                id = '',
                company_id = '',
                created_date = datetime.datetime.strptime('1975-12-30', '%Y-%m-%d').date(),
                ordered_by = 'Pax8 Partner',
                ordered_by_user_id = '',
                ordered_by_user_email = 'john@doe.com',
                is_scheduled = True,
                line_items = [
                    tl_pax8.models.line_item.LineItem(
                        id = '', 
                        product_id = '', 
                        subscription_id = '', 
                        commitment_term_id = '', 
                        provision_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        line_item_number = 1, 
                        billing_term = 'Monthly', 
                        parent_subscription_id = '', 
                        parent_line_item_number = 1, 
                        quantity = 45, 
                        provisioning_details = [
                            tl_pax8.models.provisioning_detail.ProvisioningDetail(
                                label = '', 
                                key = 'userEmailAddress', 
                                values = [
                                    ''
                                    ], 
                                description = 'Provide the user's email address', 
                                value_type = 'Input', 
                                possible_values = [
                                    ''
                                    ], )
                            ], )
                    ]
            )
        else:
            return Order(
                company_id = '',
                line_items = [
                    tl_pax8.models.line_item.LineItem(
                        id = '', 
                        product_id = '', 
                        subscription_id = '', 
                        commitment_term_id = '', 
                        provision_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        line_item_number = 1, 
                        billing_term = 'Monthly', 
                        parent_subscription_id = '', 
                        parent_line_item_number = 1, 
                        quantity = 45, 
                        provisioning_details = [
                            tl_pax8.models.provisioning_detail.ProvisioningDetail(
                                label = '', 
                                key = 'userEmailAddress', 
                                values = [
                                    ''
                                    ], 
                                description = 'Provide the user's email address', 
                                value_type = 'Input', 
                                possible_values = [
                                    ''
                                    ], )
                            ], )
                    ],
        )
        """

    def testOrder(self):
        """Test Order"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
