# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from tl_pax8.models.find_partner_invoice_items200_response import FindPartnerInvoiceItems200Response
from tl_pax8.models.find_partner_invoices200_response import FindPartnerInvoices200Response
from tl_pax8.models.invoice import Invoice

from tl_pax8.api_client import ApiClient, RequestSerialized
from tl_pax8.api_response import ApiResponse
from tl_pax8.rest import RESTResponseType


class InvoicesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_partner_invoice_items(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices items list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindPartnerInvoiceItems200Response:
        """Fetch a paginated list of items for an invoice

        Fetch a paginated list of invoice items. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param page: The page number to request in the invoices items list
        :type page: float
        :param size: Returns _this_ number of invoices items per page
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoice_items_serialize(
            invoice_id=invoice_id,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoiceItems200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_partner_invoice_items_with_http_info(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices items list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindPartnerInvoiceItems200Response]:
        """Fetch a paginated list of items for an invoice

        Fetch a paginated list of invoice items. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param page: The page number to request in the invoices items list
        :type page: float
        :param size: Returns _this_ number of invoices items per page
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoice_items_serialize(
            invoice_id=invoice_id,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoiceItems200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_partner_invoice_items_without_preload_content(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices items list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices items per page")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch a paginated list of items for an invoice

        Fetch a paginated list of invoice items. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param page: The page number to request in the invoices items list
        :type page: float
        :param size: Returns _this_ number of invoices items per page
        :type size: float
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoice_items_serialize(
            invoice_id=invoice_id,
            page=page,
            size=size,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoiceItems200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_partner_invoice_items_serialize(
        self,
        invoice_id,
        page,
        size,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if invoice_id is not None:
            _path_params['invoiceId'] = invoice_id
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoices/{invoiceId}/items',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def find_partner_invoices(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```status``` value")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```invoiceDate``` value")] = None,
        invoice_date_range_start: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` greater than or equal to this date")] = None,
        invoice_date_range_end: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` less than or equal to this date")] = None,
        due_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```dueDate``` value")] = None,
        total: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```total``` value")] = None,
        balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```balance``` value")] = None,
        carried_balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```carriedBalance``` value")] = None,
        company_id: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```companyId``` value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> FindPartnerInvoices200Response:
        """Fetch a paginated list of invoices

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param page: The page number to request in the invoices list
        :type page: float
        :param size: Returns _this_ number of invoices per page
        :type size: float
        :param sort: Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc
        :type sort: str
        :param status: Return only invoices matching this ```status``` value
        :type status: str
        :param invoice_date: Return only invoices matching this ```invoiceDate``` value
        :type invoice_date: str
        :param invoice_date_range_start: Return only invoices with an ```invoiceDate``` greater than or equal to this date
        :type invoice_date_range_start: str
        :param invoice_date_range_end: Return only invoices with an ```invoiceDate``` less than or equal to this date
        :type invoice_date_range_end: str
        :param due_date: Return only invoices matching this ```dueDate``` value
        :type due_date: str
        :param total: Return only invoices matching this ```total``` value
        :type total: float
        :param balance: Return only invoices matching this ```balance``` value
        :type balance: float
        :param carried_balance: Return only invoices matching this ```carriedBalance``` value
        :type carried_balance: float
        :param company_id: Return only invoices matching this ```companyId``` value
        :type company_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoices_serialize(
            page=page,
            size=size,
            sort=sort,
            status=status,
            invoice_date=invoice_date,
            invoice_date_range_start=invoice_date_range_start,
            invoice_date_range_end=invoice_date_range_end,
            due_date=due_date,
            total=total,
            balance=balance,
            carried_balance=carried_balance,
            company_id=company_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoices200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_partner_invoices_with_http_info(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```status``` value")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```invoiceDate``` value")] = None,
        invoice_date_range_start: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` greater than or equal to this date")] = None,
        invoice_date_range_end: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` less than or equal to this date")] = None,
        due_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```dueDate``` value")] = None,
        total: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```total``` value")] = None,
        balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```balance``` value")] = None,
        carried_balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```carriedBalance``` value")] = None,
        company_id: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```companyId``` value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[FindPartnerInvoices200Response]:
        """Fetch a paginated list of invoices

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param page: The page number to request in the invoices list
        :type page: float
        :param size: Returns _this_ number of invoices per page
        :type size: float
        :param sort: Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc
        :type sort: str
        :param status: Return only invoices matching this ```status``` value
        :type status: str
        :param invoice_date: Return only invoices matching this ```invoiceDate``` value
        :type invoice_date: str
        :param invoice_date_range_start: Return only invoices with an ```invoiceDate``` greater than or equal to this date
        :type invoice_date_range_start: str
        :param invoice_date_range_end: Return only invoices with an ```invoiceDate``` less than or equal to this date
        :type invoice_date_range_end: str
        :param due_date: Return only invoices matching this ```dueDate``` value
        :type due_date: str
        :param total: Return only invoices matching this ```total``` value
        :type total: float
        :param balance: Return only invoices matching this ```balance``` value
        :type balance: float
        :param carried_balance: Return only invoices matching this ```carriedBalance``` value
        :type carried_balance: float
        :param company_id: Return only invoices matching this ```companyId``` value
        :type company_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoices_serialize(
            page=page,
            size=size,
            sort=sort,
            status=status,
            invoice_date=invoice_date,
            invoice_date_range_start=invoice_date_range_start,
            invoice_date_range_end=invoice_date_range_end,
            due_date=due_date,
            total=total,
            balance=balance,
            carried_balance=carried_balance,
            company_id=company_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoices200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_partner_invoices_without_preload_content(
        self,
        page: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The page number to request in the invoices list")] = None,
        size: Annotated[Optional[Union[Annotated[float, Field(le=200, strict=True, ge=1)], Annotated[int, Field(le=200, strict=True, ge=1)]]], Field(description="Returns _this_ number of invoices per page")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```status``` value")] = None,
        invoice_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```invoiceDate``` value")] = None,
        invoice_date_range_start: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` greater than or equal to this date")] = None,
        invoice_date_range_end: Annotated[Optional[StrictStr], Field(description="Return only invoices with an ```invoiceDate``` less than or equal to this date")] = None,
        due_date: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```dueDate``` value")] = None,
        total: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```total``` value")] = None,
        balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```balance``` value")] = None,
        carried_balance: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="Return only invoices matching this ```carriedBalance``` value")] = None,
        company_id: Annotated[Optional[StrictStr], Field(description="Return only invoices matching this ```companyId``` value")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch a paginated list of invoices

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param page: The page number to request in the invoices list
        :type page: float
        :param size: Returns _this_ number of invoices per page
        :type size: float
        :param sort: Return invoices sorted by this field and direction Formatted as fieldName,direction - ex. sort=invoiceDate,desc
        :type sort: str
        :param status: Return only invoices matching this ```status``` value
        :type status: str
        :param invoice_date: Return only invoices matching this ```invoiceDate``` value
        :type invoice_date: str
        :param invoice_date_range_start: Return only invoices with an ```invoiceDate``` greater than or equal to this date
        :type invoice_date_range_start: str
        :param invoice_date_range_end: Return only invoices with an ```invoiceDate``` less than or equal to this date
        :type invoice_date_range_end: str
        :param due_date: Return only invoices matching this ```dueDate``` value
        :type due_date: str
        :param total: Return only invoices matching this ```total``` value
        :type total: float
        :param balance: Return only invoices matching this ```balance``` value
        :type balance: float
        :param carried_balance: Return only invoices matching this ```carriedBalance``` value
        :type carried_balance: float
        :param company_id: Return only invoices matching this ```companyId``` value
        :type company_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_partner_invoices_serialize(
            page=page,
            size=size,
            sort=sort,
            status=status,
            invoice_date=invoice_date,
            invoice_date_range_start=invoice_date_range_start,
            invoice_date_range_end=invoice_date_range_end,
            due_date=due_date,
            total=total,
            balance=balance,
            carried_balance=carried_balance,
            company_id=company_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "FindPartnerInvoices200Response",
            '404': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_partner_invoices_serialize(
        self,
        page,
        size,
        sort,
        status,
        invoice_date,
        invoice_date_range_start,
        invoice_date_range_end,
        due_date,
        total,
        balance,
        carried_balance,
        company_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page is not None:
            
            _query_params.append(('page', page))
            
        if size is not None:
            
            _query_params.append(('size', size))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if invoice_date is not None:
            
            _query_params.append(('invoiceDate', invoice_date))
            
        if invoice_date_range_start is not None:
            
            _query_params.append(('invoiceDateRangeStart', invoice_date_range_start))
            
        if invoice_date_range_end is not None:
            
            _query_params.append(('invoiceDateRangeEnd', invoice_date_range_end))
            
        if due_date is not None:
            
            _query_params.append(('dueDate', due_date))
            
        if total is not None:
            
            _query_params.append(('total', total))
            
        if balance is not None:
            
            _query_params.append(('balance', balance))
            
        if carried_balance is not None:
            
            _query_params.append(('carriedBalance', carried_balance))
            
        if company_id is not None:
            
            _query_params.append(('companyId', company_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoices',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_partner_invoice(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Invoice:
        """Fetch an invoice by invoiceId

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_invoice_serialize(
            invoice_id=invoice_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Invoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_partner_invoice_with_http_info(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Invoice]:
        """Fetch an invoice by invoiceId

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_invoice_serialize(
            invoice_id=invoice_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Invoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_partner_invoice_without_preload_content(
        self,
        invoice_id: Annotated[StrictStr, Field(description="The invoice id")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Fetch an invoice by invoiceId

        Fetch a paginated list of invoices. Default page is 0 and default size is 10. The maximum page size is 200

        :param invoice_id: The invoice id (required)
        :type invoice_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_partner_invoice_serialize(
            invoice_id=invoice_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Invoice",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_partner_invoice_serialize(
        self,
        invoice_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if invoice_id is not None:
            _path_params['invoiceId'] = invoice_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'OAuth2'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/invoices/{invoiceId}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


