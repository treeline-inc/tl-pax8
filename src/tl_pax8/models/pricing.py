# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_pax8.models.rate import Rate
from typing import Optional, Set
from typing_extensions import Self

class Pricing(BaseModel):
    """
    Pricing
    """ # noqa: E501
    billing_term: Optional[StrictStr] = Field(default=None, alias="billingTerm")
    commitment_term: Optional[StrictStr] = Field(default=None, description="Duration of the commitment", alias="commitmentTerm")
    commitment_term_in_months: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Commitment in months", alias="commitmentTermInMonths")
    type: Optional[StrictStr] = None
    unit_of_measurement: Optional[StrictStr] = Field(default=None, description="The unit of measurement", alias="unitOfMeasurement")
    rates: Optional[List[Rate]] = Field(default=None, description="A list of rates")
    __properties: ClassVar[List[str]] = ["billingTerm", "commitmentTerm", "commitmentTermInMonths", "type", "unitOfMeasurement", "rates"]

    @field_validator('billing_term')
    def billing_term_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Monthly', 'Annual', '2-Year', '3-Year', 'One-Time', 'Trial', 'Activation']):
            raise ValueError("must be one of enum values ('Monthly', 'Annual', '2-Year', '3-Year', 'One-Time', 'Trial', 'Activation')")
        return value

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Flat', 'Volume', 'Tiered', 'Mark-Up']):
            raise ValueError("must be one of enum values ('Flat', 'Volume', 'Tiered', 'Mark-Up')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pricing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rates (list)
        _items = []
        if self.rates:
            for _item_rates in self.rates:
                if _item_rates:
                    _items.append(_item_rates.to_dict())
            _dict['rates'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pricing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingTerm": obj.get("billingTerm"),
            "commitmentTerm": obj.get("commitmentTerm"),
            "commitmentTermInMonths": obj.get("commitmentTermInMonths"),
            "type": obj.get("type"),
            "unitOfMeasurement": obj.get("unitOfMeasurement"),
            "rates": [Rate.from_dict(_item) for _item in obj["rates"]] if obj.get("rates") is not None else None
        })
        return _obj


