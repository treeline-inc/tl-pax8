# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tl_pax8.models.line_item import LineItem
from typing import Optional, Set
from typing_extensions import Self

class Order(BaseModel):
    """
    Order
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="unique id of the order")
    company_id: StrictStr = Field(description="unique id of the purchasing company ie. end-user", alias="companyId")
    created_date: Optional[date] = Field(default=None, description="the date the order was created", alias="createdDate")
    ordered_by: Optional[StrictStr] = Field(default=None, description="the type of user who created the order", alias="orderedBy")
    ordered_by_user_id: Optional[StrictStr] = Field(default=None, description="unique id of the user who created this order", alias="orderedByUserId")
    ordered_by_user_email: Optional[StrictStr] = Field(default=None, description="the email address of the user who created this order", alias="orderedByUserEmail")
    is_scheduled: Optional[StrictBool] = Field(default=None, description="is ```true``` if order is future dated", alias="isScheduled")
    line_items: List[LineItem] = Field(alias="lineItems")
    __properties: ClassVar[List[str]] = ["id", "companyId", "createdDate", "orderedBy", "orderedByUserId", "orderedByUserEmail", "isScheduled", "lineItems"]

    @field_validator('ordered_by')
    def ordered_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        # Treeline Modification
        allowed_values = set(['Pax8 Partner', 'Customer', 'Pax8', 'Pax8Partner'])
        if value not in allowed_values:
            raise ValueError(f"must be one of enum values ({', '.join(allowed_values)})")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Order from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_date",
            "ordered_by_user_id",
            "is_scheduled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in line_items (list)
        _items = []
        if self.line_items:
            for _item_line_items in self.line_items:
                if _item_line_items:
                    _items.append(_item_line_items.to_dict())
            _dict['lineItems'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Order from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "companyId": obj.get("companyId"),
            "createdDate": obj.get("createdDate"),
            "orderedBy": obj.get("orderedBy"),
            "orderedByUserId": obj.get("orderedByUserId"),
            "orderedByUserEmail": obj.get("orderedByUserEmail"),
            "isScheduled": obj.get("isScheduled"),
            "lineItems": [LineItem.from_dict(_item) for _item in obj["lineItems"]] if obj.get("lineItems") is not None else None
        })
        return _obj


