# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from tl_pax8.models.address import Address
from typing import Optional, Set
from typing_extensions import Self

class CompanyUpdate(BaseModel):
    """
    CompanyUpdate
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique id of the company")
    name: Optional[StrictStr] = Field(default=None, description="The company name")
    address: Optional[Address] = None
    phone: Optional[StrictStr] = Field(default=None, description="The primary phone number of the company")
    website: Optional[StrictStr] = Field(default=None, description="The full URL of the company website")
    external_id: Optional[StrictStr] = Field(default=None, description="An external ID that can be assigned to the company for reference", alias="externalId")
    bill_on_behalf_of_enabled: Optional[StrictBool] = Field(default=None, description="Value is ```true``` if Pax8 handles billing transactions, value is ```false``` if partner handles billing transactions", alias="billOnBehalfOfEnabled")
    self_service_allowed: Optional[StrictBool] = Field(default=None, description="Value is ```true``` if self-service privileges are available to the company, otherwise value is ```false```", alias="selfServiceAllowed")
    order_approval_required: Optional[StrictBool] = Field(default=None, description="Value is ```true``` if the company's self-service orders require approval, otherwise value is ```false```", alias="orderApprovalRequired")
    status: Optional[StrictStr] = Field(default=None, description="Company Status:   * `Active` - The company is active   * `Inactive` - The company is inactive due to missing contacts   * `Deleted` - The company has been deleted ")
    __properties: ClassVar[List[str]] = ["id", "name", "address", "phone", "website", "externalId", "billOnBehalfOfEnabled", "selfServiceAllowed", "orderApprovalRequired", "status"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Inactive', 'Deleted']):
            raise ValueError("must be one of enum values ('Active', 'Inactive', 'Deleted')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CompanyUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CompanyUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "phone": obj.get("phone"),
            "website": obj.get("website"),
            "externalId": obj.get("externalId"),
            "billOnBehalfOfEnabled": obj.get("billOnBehalfOfEnabled"),
            "selfServiceAllowed": obj.get("selfServiceAllowed"),
            "orderApprovalRequired": obj.get("orderApprovalRequired"),
            "status": obj.get("status")
        })
        return _obj


