# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Commitment(BaseModel):
    """
    Commitment
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the commitment record")
    term: Optional[StrictStr] = Field(default=None, description="Duration of the commitment")
    auto_renew: Optional[StrictBool] = Field(default=None, description="Renews without manual intervention at the end of the term", alias="autoRenew")
    renewal_window_days_before_term_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of days _before_ term end-date when renewal window opens", alias="renewalWindowDaysBeforeTermEnd")
    renewal_window_days_after_term_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Number of days after the term end-date that renewal window closes", alias="renewalWindowDaysAfterTermEnd")
    allow_for_quantity_increase: Optional[StrictBool] = Field(default=None, description="Is ```true``` if quantity can be increased during commitment term", alias="allowForQuantityIncrease")
    allow_for_quantity_decrease: Optional[StrictBool] = Field(default=None, description="Is ```true``` if quantity can be decreased during commitment term", alias="allowForQuantityDecrease")
    allow_for_early_cancellation: Optional[StrictBool] = Field(default=None, description="Is ```true``` if commitment can be cancelled prior to end of term", alias="allowForEarlyCancellation")
    cancellation_fee_applied: Optional[StrictBool] = Field(default=None, description="Is ```true``` if canceling subscription entails a fee", alias="cancellationFeeApplied")
    is_transferable: Optional[StrictBool] = Field(default=None, description="Is ```true``` if commitment can be transferred to another company", alias="isTransferable")
    __properties: ClassVar[List[str]] = ["id", "term", "autoRenew", "renewalWindowDaysBeforeTermEnd", "renewalWindowDaysAfterTermEnd", "allowForQuantityIncrease", "allowForQuantityDecrease", "allowForEarlyCancellation", "cancellationFeeApplied", "isTransferable"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Commitment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Commitment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "term": obj.get("term"),
            "autoRenew": obj.get("autoRenew"),
            "renewalWindowDaysBeforeTermEnd": obj.get("renewalWindowDaysBeforeTermEnd"),
            "renewalWindowDaysAfterTermEnd": obj.get("renewalWindowDaysAfterTermEnd"),
            "allowForQuantityIncrease": obj.get("allowForQuantityIncrease"),
            "allowForQuantityDecrease": obj.get("allowForQuantityDecrease"),
            "allowForEarlyCancellation": obj.get("allowForEarlyCancellation"),
            "cancellationFeeApplied": obj.get("cancellationFeeApplied"),
            "isTransferable": obj.get("isTransferable")
        })
        return _obj


