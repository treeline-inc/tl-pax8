# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_pax8.models.provisioning_detail import ProvisioningDetail
from tl_pax8.models.subscription_commitment import SubscriptionCommitment
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Subscription
    """ # noqa: E501
    id: Optional[StrictStr] = None
    parent_subscription_id: Optional[StrictStr] = Field(default=None, alias="parentSubscriptionId")
    company_id: Optional[StrictStr] = Field(default=None, alias="companyId")
    product_id: Optional[StrictStr] = Field(default=None, alias="productId")
    quantity: Union[StrictFloat, StrictInt]
    start_date: datetime = Field(alias="startDate")
    end_date: Optional[datetime] = Field(default=None, alias="endDate")
    created_date: Optional[datetime] = Field(default=None, alias="createdDate")
    updated_date: Optional[datetime] = Field(default=None, alias="updatedDate")
    billing_start: Optional[date] = Field(default=None, alias="billingStart")
    status: Optional[StrictStr] = Field(default=None, description="Subscription Status :  * `Active` - Provisioning request complete  * `Cancelled` - Deprovisioning request complete  * `PendingManual` -  An associated manual provisioning task isn't started/completed  * `PendingAutomated` - An associated automated provisioning task isn't started/completed  * `PendingCancel` - Deprovisioning request pending  * `WaitingForDetails` - Provisioning details are missing  * `Trial` - Trial subscriptions offer free or discounted access for a limited time.  * `Converted` - Converted from trial  * `PendingActivation` - Requires Activation but has not yet been activated  * `Activated` - Requires Activation and has been activated  Activation is required for a small subset of products.  Billing services do not begin for these products until \"activation\" is complete. ")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price for the customer.")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency ISO 4217 code", alias="currencyCode")
    partner_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price for the Partner.", alias="partnerCost")
    billing_term: StrictStr = Field(alias="billingTerm")
    provisioning_details: Optional[List[ProvisioningDetail]] = Field(default=None, alias="provisioningDetails")
    commitment_term: Optional[SubscriptionCommitment] = Field(default=None, alias="commitmentTerm")
    __properties: ClassVar[List[str]] = ["id", "parentSubscriptionId", "companyId", "productId", "quantity", "startDate", "endDate", "createdDate", "updatedDate", "billingStart", "status", "price", "currencyCode", "partnerCost", "billingTerm", "provisioningDetails", "commitmentTerm"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['Active', 'Cancelled', 'PendingManual', 'PendingAutomated', 'PendingCancel', 'WaitingForDetails', 'Trial', 'Converted', 'PendingActivation', 'Activated']):
            raise ValueError("must be one of enum values ('Active', 'Cancelled', 'PendingManual', 'PendingAutomated', 'PendingCancel', 'WaitingForDetails', 'Trial', 'Converted', 'PendingActivation', 'Activated')")
        return value

    @field_validator('billing_term')
    def billing_term_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['Monthly', 'Annual', '2-Year', '3-Year', '1-Time', 'Trial', 'Activation']):
            raise ValueError("must be one of enum values ('Monthly', 'Annual', '2-Year', '3-Year', '1-Time', 'Trial', 'Activation')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "parent_subscription_id",
            "company_id",
            "product_id",
            "created_date",
            "updated_date",
            "billing_start",
            "status",
            "commitment_term",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provisioning_details (list)
        _items = []
        if self.provisioning_details:
            for _item_provisioning_details in self.provisioning_details:
                if _item_provisioning_details:
                    _items.append(_item_provisioning_details.to_dict())
            _dict['provisioningDetails'] = _items
        # override the default output from pydantic by calling `to_dict()` of commitment_term
        if self.commitment_term:
            _dict['commitmentTerm'] = self.commitment_term.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "parentSubscriptionId": obj.get("parentSubscriptionId"),
            "companyId": obj.get("companyId"),
            "productId": obj.get("productId"),
            "quantity": obj.get("quantity"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "createdDate": obj.get("createdDate"),
            "updatedDate": obj.get("updatedDate"),
            "billingStart": obj.get("billingStart"),
            "status": obj.get("status"),
            "price": obj.get("price"),
            "currencyCode": obj.get("currencyCode"),
            "partnerCost": obj.get("partnerCost"),
            "billingTerm": obj.get("billingTerm"),
            "provisioningDetails": [ProvisioningDetail.from_dict(_item) for _item in obj["provisioningDetails"]] if obj.get("provisioningDetails") is not None else None,
            "commitmentTerm": SubscriptionCommitment.from_dict(obj["commitmentTerm"]) if obj.get("commitmentTerm") is not None else None
        })
        return _obj


