# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Product(BaseModel):
    """
    Product
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="The name of a product")
    vendor_name: Optional[StrictStr] = Field(default=None, description="The name of the vendor", alias="vendorName")
    short_description: Optional[StrictStr] = Field(default=None, description="A short description of the product", alias="shortDescription")
    sku: Optional[StrictStr] = Field(default=None, description="The product sku")
    vendor_sku: Optional[StrictStr] = Field(default=None, description="The product vendor sku", alias="vendorSku")
    alt_vendor_sku: Optional[StrictStr] = Field(default=None, description="The Microsoft legacy sku has been deprecated. Please transition to vendorSku", alias="altVendorSku")
    requires_commitment: Optional[StrictBool] = Field(default=None, description="Whether the product requires a commitment", alias="requiresCommitment")
    product_id: Optional[StrictStr] = Field(default=None, description="The product id", alias="productId")
    sku_id: Optional[StrictStr] = Field(default=None, description="The sku id", alias="skuId")
    segment: Optional[StrictStr] = Field(default=None, description="The segment of the product", alias="segment")
    __properties: ClassVar[List[str]] = ["id", "name", "vendorName", "shortDescription", "sku", "vendorSku", "altVendorSku", "requiresCommitment", "productId", "skuId", "segment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def model_post_init(self, __context):
        super().model_post_init(__context)
        if self.vendor_name != "Microsoft" or not self.vendor_sku:
            return

        # Parse vendor_sku string directly
        try:
            # Try parsing as JSON
            data = json.loads(self.vendor_sku)
            self.product_id = data.get("productId")
            self.sku_id = data.get("skuId")
            self.segment = data.get("segment") or data.get("segmentName")
        except json.JSONDecodeError:
            # Try parsing as productId:skuId format using regex if it's not JSON
            product_sku_pattern = re.compile(r'^([^:]+):(.+)$')
            if match := product_sku_pattern.match(self.vendor_sku):
                self.product_id = match.group(1)
                self.sku_id = match.group(2)


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Product from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Product from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "vendorName": obj.get("vendorName"),
            "shortDescription": obj.get("shortDescription"),
            "sku": obj.get("sku"),
            "vendorSku": obj.get("vendorSku"),
            "altVendorSku": obj.get("altVendorSku"),
            "requiresCommitment": obj.get("requiresCommitment")
        })
        return _obj


