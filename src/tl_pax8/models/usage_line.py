# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UsageLine(BaseModel):
    """
    UsageLine
    """ # noqa: E501
    usage_summary_id: Optional[StrictStr] = Field(default=None, description="The associated usage summary id", alias="usageSummaryId")
    usage_date: Optional[StrictStr] = Field(default=None, description="The date the usage was recorded", alias="usageDate")
    product_name: Optional[StrictStr] = Field(default=None, description="The usage product name", alias="productName")
    product_id: Optional[StrictStr] = Field(default=None, description="The usage product id", alias="productId")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The product unit of measure", alias="unitOfMeasure")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The usage quantity")
    current_charges: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Charges for the usage line", alias="currentCharges")
    current_profit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Profit for the usage line", alias="currentProfit")
    partner_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The partner total for the usage line", alias="partnerTotal")
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unit price of the usage product", alias="unitPrice")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency ISO 4217 code", alias="currencyCode")
    is_trial: Optional[StrictBool] = Field(default=None, description="Indicates if the usage line is for a trial", alias="isTrial")
    __properties: ClassVar[List[str]] = ["usageSummaryId", "usageDate", "productName", "productId", "unitOfMeasure", "quantity", "currentCharges", "currentProfit", "partnerTotal", "unitPrice", "currencyCode", "isTrial"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "usageSummaryId": obj.get("usageSummaryId"),
            "usageDate": obj.get("usageDate"),
            "productName": obj.get("productName"),
            "productId": obj.get("productId"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "quantity": obj.get("quantity"),
            "currentCharges": obj.get("currentCharges"),
            "currentProfit": obj.get("currentProfit"),
            "partnerTotal": obj.get("partnerTotal"),
            "unitPrice": obj.get("unitPrice"),
            "currencyCode": obj.get("currencyCode"),
            "isTrial": obj.get("isTrial")
        })
        return _obj


