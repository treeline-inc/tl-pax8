# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Invoice
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The id")
    invoice_date: Optional[StrictStr] = Field(default=None, description="The date the invoice is generated for", alias="invoiceDate")
    due_date: Optional[StrictStr] = Field(default=None, description="The date on which payment is due", alias="dueDate")
    balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The current invoice balance")
    carried_balance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The outstanding balance until current invoiceDate", alias="carriedBalance")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total amount due")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency ISO 4217 code", alias="currencyCode")
    partner_name: Optional[StrictStr] = Field(default=None, description="The name of the invoiced partner", alias="partnerName")
    company_id: Optional[StrictStr] = Field(default=None, description="The company id", alias="companyId")
    external_id: Optional[StrictStr] = Field(default=None, description="The company external id", alias="externalId")
    __properties: ClassVar[List[str]] = ["id", "invoiceDate", "dueDate", "balance", "carriedBalance", "total", "currencyCode", "partnerName", "companyId", "externalId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "invoiceDate": obj.get("invoiceDate"),
            "dueDate": obj.get("dueDate"),
            "balance": obj.get("balance"),
            "carriedBalance": obj.get("carriedBalance"),
            "total": obj.get("total"),
            "currencyCode": obj.get("currencyCode"),
            "partnerName": obj.get("partnerName"),
            "companyId": obj.get("companyId"),
            "externalId": obj.get("externalId")
        })
        return _obj


