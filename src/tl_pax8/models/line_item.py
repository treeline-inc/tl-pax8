# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from tl_pax8.models.provisioning_detail import ProvisioningDetail
from typing import Optional, Set
from typing_extensions import Self

class LineItem(BaseModel):
    """
    LineItem
    """ # noqa: E501
    id: Optional[StrictStr] = None
    product_id: StrictStr = Field(alias="productId")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    commitment_term_id: Optional[StrictStr] = Field(default=None, alias="commitmentTermId")
    provision_start_date: Optional[datetime] = Field(default=None, alias="provisionStartDate")
    # Treeline Modification
    line_item_number: Union[StrictFloat, StrictInt, None] = Field(default=None, description="Required. Number used as a reference to the line item for parent line items", alias="lineItemNumber")
    billing_term: Optional[StrictStr] = Field(default=None, alias="billingTerm")
    parent_subscription_id: Optional[StrictStr] = Field(default=None, description="Reference to the subscription this item depends on", alias="parentSubscriptionId")
    parent_line_item_number: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Reference to the required parent line item in this same order", alias="parentLineItemNumber")
    quantity: Union[StrictFloat, StrictInt] = Field(description="Whole Number")
    provisioning_details: Optional[List[ProvisioningDetail]] = Field(default=None, alias="provisioningDetails")
    __properties: ClassVar[List[str]] = ["id", "productId", "subscriptionId", "commitmentTermId", "provisionStartDate", "lineItemNumber", "billingTerm", "parentSubscriptionId", "parentLineItemNumber", "quantity", "provisioningDetails"]

    @field_validator('billing_term')
    def billing_term_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        # Treeline Modification
        allowed_values = set(['Monthly', 'Annual', '2-Year', '3-Year', '1-Time', 'Trial', 'Activation', 'One-Time'])
        if value not in allowed_values:
            raise ValueError(f"must be one of enum values ({', '.join(allowed_values)})")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in provisioning_details (list)
        _items = []
        if self.provisioning_details:
            for _item_provisioning_details in self.provisioning_details:
                if _item_provisioning_details:
                    _items.append(_item_provisioning_details.to_dict())
            _dict['provisioningDetails'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "productId": obj.get("productId"),
            "subscriptionId": obj.get("subscriptionId"),
            "commitmentTermId": obj.get("commitmentTermId"),
            "provisionStartDate": obj.get("provisionStartDate"),
            "lineItemNumber": obj.get("lineItemNumber"),
            "billingTerm": obj.get("billingTerm"),
            "parentSubscriptionId": obj.get("parentSubscriptionId"),
            "parentLineItemNumber": obj.get("parentLineItemNumber"),
            "quantity": obj.get("quantity"),
            "provisioningDetails": [ProvisioningDetail.from_dict(_item) for _item in obj["provisioningDetails"]] if obj.get("provisioningDetails") is not None else None
        })
        return _obj


