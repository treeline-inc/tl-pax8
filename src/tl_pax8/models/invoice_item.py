# coding: utf-8

"""
    Authentication

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class InvoiceItem(BaseModel):
    """
    InvoiceItem
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique id for this invoice item")
    purchase_order_number: Optional[StrictStr] = Field(default=None, description="The purchase order number", alias="purchaseOrderNumber")
    type: Optional[StrictStr] = Field(default=None, description="The item type")
    company_id: Optional[StrictStr] = Field(default=None, description="The company id", alias="companyId")
    external_id: Optional[StrictStr] = Field(default=None, description="The company external id", alias="externalId")
    company_name: Optional[StrictStr] = Field(default=None, description="The name of the company", alias="companyName")
    start_period: Optional[StrictStr] = Field(default=None, description="The start period", alias="startPeriod")
    end_period: Optional[StrictStr] = Field(default=None, description="The end period", alias="endPeriod")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of this SKU")
    unit_of_measure: Optional[StrictStr] = Field(default=None, description="The unit of measure", alias="unitOfMeasure")
    term: Optional[StrictStr] = Field(default=None, description="The billing term")
    sku: Optional[StrictStr] = Field(default=None, description="The product sku")
    description: Optional[StrictStr] = Field(default=None, description="The description")
    details: Optional[StrictStr] = Field(default=None, description="The details")
    rate_type: Optional[StrictStr] = Field(default=None, description="The rate type", alias="rateType")
    charge_type: Optional[StrictStr] = Field(default=None, description="The charge type", alias="chargeType")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The customer unit price")
    sub_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The customer sub total. Represents cost of services plus billing fees.", alias="subTotal")
    cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The partner unit cost")
    cost_total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The partner total cost of the services", alias="costTotal")
    offered_by: Optional[StrictStr] = Field(default=None, description="The account who offers this product", alias="offeredBy")
    billed_by_pax8: Optional[StrictBool] = Field(default=None, description="Is the item billed directly by Pax8", alias="billedByPax8")
    total: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The customer total including all services and fees")
    product_id: Optional[StrictStr] = Field(default=None, description="The product id", alias="productId")
    product_name: Optional[StrictStr] = Field(default=None, description="The product name", alias="productName")
    billing_fee: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fee for Pax8 billing a bill on behalf of company", alias="billingFee")
    billing_fee_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The fee rate for Pax8 billing a bill on behalf of company", alias="billingFeeRate")
    amount_due: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The final total due for the item for this invoice", alias="amountDue")
    currency_code: Optional[StrictStr] = Field(default=None, description="The currency ISO 4217 code", alias="currencyCode")
    subscription_id: Optional[StrictStr] = Field(default=None, description="If the type is 'subscription' or 'prorate' this field will contain the subscription identifier. Otherwise this field will be null.", alias="subscriptionId")
    __properties: ClassVar[List[str]] = ["id", "purchaseOrderNumber", "type", "companyId", "externalId", "companyName", "startPeriod", "endPeriod", "quantity", "unitOfMeasure", "term", "sku", "description", "details", "rateType", "chargeType", "price", "subTotal", "cost", "costTotal", "offeredBy", "billedByPax8", "total", "productId", "productName", "billingFee", "billingFeeRate", "amountDue", "currencyCode", "subscriptionId"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['rebate', 'prorate', 'subscription', 'payment-credit', 'one-time', 'service-charge', 'service-credit', 'invoice-credit']):
            raise ValueError("must be one of enum values ('rebate', 'prorate', 'subscription', 'payment-credit', 'one-time', 'service-charge', 'service-credit', 'invoice-credit')")
        return value

    @field_validator('term')
    def term_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['3 Year', 'Annual', '2 Year', 'Activation', 'One-Time', 'Arrears', 'Trial', 'Rebate', 'One-time', 'Monthly']):
            raise ValueError("must be one of enum values ('3 Year', 'Annual', '2 Year', 'Activation', 'One-Time', 'Arrears', 'Trial', 'Rebate', 'One-time', 'Monthly')")
        return value

    @field_validator('rate_type')
    def rate_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['markup (Percentage based markup over to be determined base cost)', 'single (Single price for any quantity, same as flat)', 'flat (Single price for any quantity, same as single)', 'volume (Price scales linearly with quantity)', 'tiered (Price dependant on quantity)']):
            raise ValueError("must be one of enum values ('markup (Percentage based markup over to be determined base cost)', 'single (Single price for any quantity, same as flat)', 'flat (Single price for any quantity, same as single)', 'volume (Price scales linearly with quantity)', 'tiered (Price dependant on quantity)')")
        return value

    @field_validator('charge_type')
    def charge_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['flat', 'per']):
            raise ValueError("must be one of enum values ('flat', 'per')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "purchaseOrderNumber": obj.get("purchaseOrderNumber"),
            "type": obj.get("type"),
            "companyId": obj.get("companyId"),
            "externalId": obj.get("externalId"),
            "companyName": obj.get("companyName"),
            "startPeriod": obj.get("startPeriod"),
            "endPeriod": obj.get("endPeriod"),
            "quantity": obj.get("quantity"),
            "unitOfMeasure": obj.get("unitOfMeasure"),
            "term": obj.get("term"),
            "sku": obj.get("sku"),
            "description": obj.get("description"),
            "details": obj.get("details"),
            "rateType": obj.get("rateType"),
            "chargeType": obj.get("chargeType"),
            "price": obj.get("price"),
            "subTotal": obj.get("subTotal"),
            "cost": obj.get("cost"),
            "costTotal": obj.get("costTotal"),
            "offeredBy": obj.get("offeredBy"),
            "billedByPax8": obj.get("billedByPax8"),
            "total": obj.get("total"),
            "productId": obj.get("productId"),
            "productName": obj.get("productName"),
            "billingFee": obj.get("billingFee"),
            "billingFeeRate": obj.get("billingFeeRate"),
            "amountDue": obj.get("amountDue"),
            "currencyCode": obj.get("currencyCode"),
            "subscriptionId": obj.get("subscriptionId")
        })
        return _obj


